{"version":3,"sources":["store/reducers/reducerA.js","store/index.js","utils/history.js","components/Routes.js","Styles/FlexContainer.js","Styles/Header.js","Styles/StyledWhiteKey.js","Styles/KeyboardContainer.js","Styles/StyledBlackKey.js","components/HomePage.js","components/SynthBoard.js","components/WhiteKey.js","components/BlackKey.js","App.js","serviceWorker.js","index.js"],"names":["initialState","value","rootReducer","combineReducers","state","action","type","store","createStore","history","createBrowserHistory","Routes","props","exact","path","component","HomePage","render","to","FlexContainer","styled","div","Header","h1","StyledWhiteKey","pressed","KeyboardContainer","StyledBlackKey","SynthBoard","note","WhiteKey","useState","setPressed","synth","Tone","toMaster","onMouseDown","triggerAttackRelease","onMouseUp","BlackKey","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea998142.chunk.js","sourcesContent":["/**\n * ACTION TYPES\n */\nconst SET_VALUE = 'SET_VALUE'\n\n/**\n * INITIAL STATE\n */\nconst initialState = {\n  value: 0,\n}\n\n/**\n * ACTION CREATORS\n */\nexport const setValue = (value) => ({\n  type: SET_VALUE,\n  value,\n})\n\n/**\n * THUNK CREATORS\n */\n// export const fetchRandomCard = () => async (dispatch) => {\n//   const {data} = await axios.get('/api/cards/random')\n//   dispatch(setCard(data))\n// }\n\n/**\n * REDUCER\n */\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case SET_VALUE:\n      return {...state, value: action.value}\n    default:\n      return state\n  }\n}\n","import {createStore, combineReducers} from 'redux'\nimport {reducerA} from './reducers'\n\nconst rootReducer = combineReducers(reducerA)\n\nexport const store = createStore(rootReducer)\n","import {createBrowserHistory} from 'history'\n\nconst history = createBrowserHistory()\n\nexport default history\n","import React from 'react'\nimport {Route, Switch, Router, Redirect} from 'react-router-dom'\nimport {HomePage} from '../components'\nimport {history} from '../utils'\n\nconst Routes = function (props) {\n  return (\n    <Router history={history}>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route render={() => <Redirect to=\"/\" />} />\n      </Switch>\n    </Router>\n  )\n}\nexport default Routes\n","import styled from 'styled-components'\n\nconst FlexContainer = styled.div/*css*/ `\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100vh;\n  padding: 1rem;\n`\nexport default FlexContainer\n","import styled from 'styled-components'\n\nconst Header = styled.h1`\n  color: blue;\n  font-size: 2rem;\n`\n\nexport default Header\n","import styled from 'styled-components'\n\nconst StyledWhiteKey = styled.div`\n  height: 100%;\n  width: 4rem;\n  border: black solid 0.2rem;\n  border-radius: 1rem;\n  ${({pressed}) =>\n    pressed ? `background-color:lightblue;` : `background-color:white;`}\n`\nexport default StyledWhiteKey\n","import styled from 'styled-components'\n\nconst KeyboardContainer = styled.div`\n  height: 12rem;\n  width: 80%;\n  display: flex;\n`\nexport default KeyboardContainer\n","import styled from 'styled-components'\n\nconst StyledBlackKey = styled.div`\n  height: 60%;\n  position: relative;\n  left: 2.5rem;\n  top: -100%;\n  width: 3rem;\n  border-radius: 1rem;\n  ${({pressed}) =>\n    pressed ? `background-color: grey;` : `background-color:black;`}\n`\nexport default StyledBlackKey\n","import React from 'react'\nimport {FlexContainer, Header} from '../Styles'\nimport {SynthBoard} from '../components'\n\nconst HomePage = function (props) {\n  return (\n    <FlexContainer>\n      <Header>Hello MintBean, my name is ToneWizard</Header>\n      <SynthBoard />\n      <Header>Play a tune I might know</Header>\n    </FlexContainer>\n  )\n}\nexport default HomePage\n","import React from 'react'\nimport {WhiteKey, BlackKey} from '../components'\nimport {KeyboardContainer} from '../Styles'\n\nconst SynthBoard = function (props) {\n  return (\n    <KeyboardContainer>\n      <div>\n        <WhiteKey note=\"C4\" />\n        <BlackKey note=\"C#4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"D4\" />\n        <BlackKey note=\"D#4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"E4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"F4\" />\n        <BlackKey note=\"F#4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"G4\" />\n        <BlackKey note=\"G#4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"A4\" />\n        <BlackKey note=\"A#4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"B4\" />\n      </div>\n      <div>\n        <WhiteKey note=\"C5\" />\n        <BlackKey note=\"C#5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"D5\" />\n        <BlackKey note=\"D#5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"E5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"F5\" />\n        <BlackKey note=\"F#5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"G5\" />\n        <BlackKey note=\"G#5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"A5\" />\n        <BlackKey note=\"A#5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"B5\" />\n      </div>\n      <div>\n        <WhiteKey note=\"C6\" />\n      </div>\n    </KeyboardContainer>\n  )\n}\nexport default SynthBoard\n","import React, {useState} from 'react'\nimport {StyledWhiteKey} from '../Styles'\nimport * as Tone from 'tone'\n\nconst WhiteKey = function ({note}) {\n  const [pressed, setPressed] = useState(false)\n  const synth = new Tone.Synth().toMaster()\n\n  return (\n    <StyledWhiteKey\n      pressed={pressed}\n      onMouseDown={() => {\n        setPressed(true)\n        synth.triggerAttackRelease(note, '8n')\n      }}\n      onMouseUp={() => {\n        setPressed(false)\n      }}\n    ></StyledWhiteKey>\n  )\n}\nexport default WhiteKey\n","import React, {useState} from 'react'\nimport {StyledBlackKey} from '../Styles'\nimport * as Tone from 'tone'\n\nconst BlackKey = function ({note}) {\n  const [pressed, setPressed] = useState(false)\n  const synth = new Tone.Synth().toMaster()\n  return (\n    <StyledBlackKey\n      pressed={pressed}\n      onMouseDown={() => {\n        setPressed(true)\n        synth.triggerAttackRelease(note, '8n')\n      }}\n      onMouseUp={() => {\n        setPressed(false)\n      }}\n    ></StyledBlackKey>\n  )\n}\nexport default BlackKey\n","import React from 'react'\n\nimport './App.css'\nimport {Provider} from 'react-redux'\nimport {store} from './store'\nimport {Routes} from './components'\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Routes />\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}